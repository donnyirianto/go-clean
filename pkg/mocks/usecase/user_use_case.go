// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/thnkrn/go-fiber-crud-clean-arch/pkg/domain"
	fasthttp "github.com/valyala/fasthttp"

	mock "github.com/stretchr/testify/mock"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *UserUseCase) Create(ctx *fasthttp.RequestCtx, user domain.User) (domain.User, error) {
	ret := _m.Called(ctx, user)

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx, domain.User) (domain.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx, domain.User) domain.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(*fasthttp.RequestCtx, domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, user
func (_m *UserUseCase) Delete(ctx *fasthttp.RequestCtx, user domain.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx, domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *UserUseCase) FindAll(ctx *fasthttp.RequestCtx) ([]domain.User, error) {
	ret := _m.Called(ctx)

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx) ([]domain.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx) []domain.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*fasthttp.RequestCtx) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *UserUseCase) FindByID(ctx *fasthttp.RequestCtx, id string) (domain.User, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx, string) (domain.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx, string) domain.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(*fasthttp.RequestCtx, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMatchName provides a mock function with given fields: ctx, text
func (_m *UserUseCase) GetMatchName(ctx *fasthttp.RequestCtx, text string) ([]domain.User, error) {
	ret := _m.Called(ctx, text)

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx, string) ([]domain.User, error)); ok {
		return rf(ctx, text)
	}
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx, string) []domain.User); ok {
		r0 = rf(ctx, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*fasthttp.RequestCtx, string) error); ok {
		r1 = rf(ctx, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: ctx, id, user
func (_m *UserUseCase) UpdateByID(ctx *fasthttp.RequestCtx, id string, user domain.User) (domain.User, error) {
	ret := _m.Called(ctx, id, user)

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx, string, domain.User) (domain.User, error)); ok {
		return rf(ctx, id, user)
	}
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx, string, domain.User) domain.User); ok {
		r0 = rf(ctx, id, user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(*fasthttp.RequestCtx, string, domain.User) error); ok {
		r1 = rf(ctx, id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUseCase creates a new instance of UserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
